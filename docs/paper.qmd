---
title: "Reputational Risk and Questionable Research Practices in Archaeological Science"
author: Ben Marwick
date: now
format: html
editor: source
execute: 
  warning: false
---

## Introduction

```{r}
library(tidyverse)
```

## Authenticate with Elsevier

```{r}
#| eval: false

#  This only works on campus or with VPN
library(rscopus)
options("elsevier_api_key" = "053e6f8f2c1abe6fcdc943ee66759e5e")
have_api_key()
```

## Get JASR data

```{r}
#| eval: false

# get a bunch of DOIs for J. Arch. Sci Reports
res = scopus_search(query = "ISSN(2352-409X)", 
                    max_count = 6000, # Total Entries are 3906
                    count = 25)
df = gen_entries_to_df(res$entries)
head(df$df)

full_text_jasr <- vector("list", length = nrow(df$df))

library(httr)

# get the full text for each DOI
for(i in 1:nrow(df$df)){
  
  the_doi <- 
    paste0("https://api.elsevier.com/content/article/doi/",
           df$df$`prism:doi`[i], 
           "?APIKey=",
           "053e6f8f2c1abe6fcdc943ee66759e5e",
           "&httpAccept=text/plain")
  
  result <- GET(url = the_doi)
  
  full_text_jasr[[i]] <- content(result)
  
  print(i)
  Sys.sleep(0.1)
  
}

ft_df <- 
  tibble(
    doi = df$df$`prism:doi`,
    full_text_jasr = full_text_jas
  ) 

# save this so we don't have to scrape again
saveRDS(ft_df,
        "data/full_text_jasr.rds")
```


## Get JASR data

```{r}
#| eval: false

# get a bunch of DOIs for J. Arch. Sci
res = scopus_search(query = "ISSN(0305-4403)", 
                    max_count = 5000, # Total Entries are 6114
                    count = 25)
df = gen_entries_to_df(res$entries)
head(df$df)

full_text_jas <- vector("list", length = nrow(df$df))

library(httr)

# get the full text for each DOI
for(i in 1:nrow(df$df)){
  
  the_doi <- 
    paste0("https://api.elsevier.com/content/article/doi/",
           df$df$`prism:doi`[i], 
           "?APIKey=",
           "053e6f8f2c1abe6fcdc943ee66759e5e",
           "&httpAccept=text/plain")
  
  result <- GET(url = the_doi)
  
  full_text_jas[[i]] <- content(result)
  
  print(i)
  Sys.sleep(0.1)
  
}

ft_df <- 
  tibble(
    doi = df$df$`prism:doi`,
    full_text_jas = full_text_jas
  ) 

# save this so we don't have to scrape again
saveRDS(ft_df,
        "data/full_text_jas.rds")



```


## Clean the JASR data and extract p-values

```{r}
#| eval: false

ft_df_jasr <- readRDS("data/full_text_jasr.rds")

ft_df_clean <- 
  ft_df_jasr %>% 
  filter(map_lgl(full_text_jasr, ~ .x %>%
                   is.character %>% 
                   all)) %>% 
  mutate(full_text_jasr = map(full_text_jasr, 
                             ~str_squish(str_to_lower(.x)))) %>% 
  mutate(ps = map(full_text_jasr, 
                  ~unlist(str_extract_all(.x,
                                          "p *= .{6}|p *< .{6}|p *> .{6}"))))  %>% 
  unnest(ps)

# is the p-value reported exactly or with an inequi?
ft_df_clean_reporting <- 
ft_df_clean %>% 
  mutate(reporting = ifelse(str_detect(ps, "<|>"), "inequ", "exact"))

# take a look at how tests are reported by grabbing the text immediately before the
# p-values
jas_archaeology_reports_full_text_ps_test_reporting <- 
  ft_df %>% 
  mutate(test_reports = map(full_text_jasr, 
                            ~unlist(str_extract_all(str_squish(.x), 
                            ".{50}p = .{50}|.{50}p < .{50}|.{50}p > .{50}")))) %>% 
  unnest(test_reports)  %>% 
  select(-full_text_jasr)

# clean the p-values and treat inqualitites
ft_df_ps_clean <- 
  ft_df_clean_reporting %>% 
  mutate(p_value = case_when(
    str_detect(ps, "e")       ~  0.00001,
    str_detect(ps, "<0.0001") ~  0.00005,
    str_detect(ps, "< 0.0001") ~ 0.00005,
    str_detect(ps, "<0.001") ~   0.0005,
    str_detect(ps, "< 0.001") ~  0.0005,
    str_detect(ps, "< 0.05") ~   0.025,
    str_detect(ps, "<0.05") ~    0.025,
    str_detect(ps, "< 0.01") ~   0.005,
    str_detect(ps, "<0.01") ~    0.005,
    TRUE ~ parse_number(ps)
  ))  %>% 
  select(-full_text_jasr)

# save this so we don't have to clean again
write.csv(ft_df_ps_clean,
          "data/jasr_p_values_only.csv")
```

## Clean the JAS data and extract p-values

```{r}
#| eval: false

ft_df_jas <- readRDS("data/full_text_jas.rds")

ft_df_clean <- 
  ft_df_jas %>% 
  filter(map_lgl(full_text_jas, ~ .x %>%
                   is.character %>% 
                   all)) %>% 
  mutate(full_text_jas = map(full_text_jas, 
                             ~str_squish(str_to_lower(.x)))) %>% 
  mutate(ps = map(full_text_jas, 
                  ~unlist(str_extract_all(.x,
                                          "p *= .{6}|p *< .{6}|p *> .{6}"))))  %>% 
  unnest(ps)


# is the p-value reported exactly or with an inequi?
ft_df_clean_reporting <- 
ft_df_clean %>% 
  mutate(reporting = ifelse(str_detect(ps, "<|>"), "inequ", "exact"))

# take a look at how tests are reported by grabbing the text immediately before the
# p-values
jas_archaeology_full_text_ps_test_reporting <- 
  ft_df %>% 
  mutate(test_reports = map(full_text_jas, ~unlist(str_extract_all(str_squish(.x), ".{50}p = .{50}|.{50}p < .{50}|.{50}p > .{50}")))) %>% 
  unnest(test_reports)  %>% 
  select(-full_text_jas)

# clean the p-values and treat inqualitites
ft_df_ps_clean <- 
  ft_df_clean_reporting %>% 
  mutate(p_value = case_when(
    str_detect(ps, "e")       ~  0.00001,
    str_detect(ps, "<0.0001") ~  0.00005,
    str_detect(ps, "< 0.0001") ~ 0.00005,
    str_detect(ps, "<0.001") ~   0.0005,
    str_detect(ps, "< 0.001") ~  0.0005,
    str_detect(ps, "< 0.05") ~   0.025,
    str_detect(ps, "<0.05") ~    0.025,
    str_detect(ps, "< 0.01") ~   0.005,
    str_detect(ps, "<0.01") ~    0.005,
    TRUE ~ parse_number(ps)
  ))  %>% 
  select(-full_text_jas)

# save this so we don't have to clean again
write.csv(ft_df_ps_clean,
          "data/jas_p_values_only.csv")

```

## Explore the distributions of p-values

```{r}
jasr_p_values_only <- 
  read_csv(here::here("data/jasr_p_values_only.csv")) %>% 
  filter(between(p_value, 0, 1))
  
jas_p_values_only  <- 
  read_csv(here::here("data/jas_p_values_only.csv")) %>% 
  filter(between(p_value, 0, 1))

both_journals <- 
bind_rows(jasr_p_values_only,
          jas_p_values_only) %>% 
  mutate(journal = case_when(
    str_detect(doi, "jas\\.") ~ "JAS",
    str_detect(doi, "jasrep\\.") ~ "JASR"
  ))  %>% 
  drop_na(journal)

both_journals_summary <- 
both_journals %>% 
  group_by(journal, doi) %>% 
  summarise(n_p_values_per_article = n()) %>% 
  ungroup(doi) %>% 
  mutate(n_p_values_total = n()) %>% 
  mutate(journal_n = paste0(journal, "\n(n = ", n_p_values_total, ")"))

# drop unusual articles that have >100 p-values
articles_with_more_than_100_pvalues <- 
  both_journals_summary %>% 
  filter(n_p_values_per_article > 100) %>% 
  pull(doi)

both_journals_subset <- 
  both_journals %>% 
  filter(!doi %in% articles_with_more_than_100_pvalues)
  
n_p_values_total_jasr <- 
  both_journals_subset %>% 
  filter(journal == "JAS") %>% 
  nrow()

n_p_values_total_jas <- 
  both_journals_subset %>% 
  filter(journal == "JASR") %>% 
  nrow()

n_papers_jasr <- 
 both_journals_subset %>% 
  filter(journal == "JASR") %>% 
  distinct(doi) %>% 
  nrow()

n_papers_jas <- 
 both_journals_subset %>% 
  filter(journal == "JAS") %>% 
  distinct(doi) %>% 
  nrow()

both_journals_summary <- 
both_journals_subset %>% 
  group_by(journal, doi) %>% 
  summarise(n_p_values_per_article = n()) %>% 
  ungroup(doi) %>% 
  mutate(n_p_values_total = n()) %>% 
  mutate(journal_n = paste0(journal, "\n(n = ", n_p_values_total, ")"))

mean_number_of_p_values_per_paper <- 
  both_journals_summary %>% 
  summarise(mean_n_p = mean(n_p_values_per_article))
  
ggplot(both_journals_summary) +
  aes(journal_n, 
      n_p_values_per_article 
      ) +
  geom_boxplot() +
  scale_y_log10(labels = scales::label_comma(drop0trailing = TRUE)) +
  theme_minimal(base_size = 14)  +
  labs(x = "",
       y = "Number of p-values per article")

ggsave(here::here("figures/summary-n-papers-and-n-p-values.png"),
       h = 5,
       w = 4,
       bg = "white")

```

We have `r n_p_values_total_jasr` p-values from `r n_papers_jasr` JASR papers and `r n_p_values_total_jas` p-values from `r n_papers_jas` from JAS papers. 

## p-values over time

```{r}

both_journals_by_year <- 
both_journals_subset %>% 
  mutate(year = str_remove(doi, "10.1016/j.jas[a-z]{0,3}.")) %>% 
  mutate(year = parse_number(str_sub(year, 1, 4))) %>% 
  filter(year > 1900) %>% 
  group_by(year, journal, doi) %>% 
  summarise(n_p_values_per_article = n()) %>% 
  ungroup(doi) %>% 
  summarise(n_p_values_per_year = n(),
            mean_number_of_p_values_per_paper = mean(n_p_values_per_article))
  
ggplot(both_journals_by_year) +
  aes(year, 
      mean_number_of_p_values_per_paper,
      colour = journal) +
  geom_line(linewidth = 2) +
  theme_minimal(base_size = 12) +
  theme(legend.position = c(0.7, 0.85)) +
  labs(y = "Mean number of p-values per paper",
       colour = "") 

ggsave(here::here("figures/summary-p-values-over-time.png"),
       h = 4,
       w = 6,
       bg = "white")

```

## Inspect the distributions of p-values

```{r}
# zoom facet
# from here: https://www.data-imaginist.com/2019/the-ggforce-awakens-again/

library(ggforce)

jas_exact_zoom_plot_data <- 
  both_journals_subset %>% 
  filter(journal == "JAS",
         reporting == "exact")

ggplot() +
  geom_histogram(aes(p_value),
                 mutate(jas_exact_zoom_plot_data,
                        z = FALSE),
                 bins = 30)  +
  geom_histogram(aes(p_value),
                 mutate(jas_exact_zoom_plot_data,
                        z = TRUE),
                   bins = 400) +   
  facet_zoom(
    xlim = c(0, 0.1), 
    ylim = c(0, 600),
    zoom.data = z,
    horizontal = FALSE) +
  theme(zoom.y = element_blank(), 
        validate = FALSE) +
  scale_x_continuous(breaks = pretty) +
  theme_light(base_size = 18) +
  ylab("frequency in JAS") +
  xlab("p-value (exactly reported in the article text)")

ggsave(here::here("figures/jas_p_value_zoom_distribution.png"),
       w = 14,
       h = 6,
       dpi = 600)
```


```{r}

jasr_exact_zoom_plot_data <- 
  both_journals_subset %>% 
  filter(journal == "JASR",
         reporting == "exact")

ggplot() +
  geom_histogram(aes(p_value),
                 mutate(jasr_exact_zoom_plot_data,
                        z = FALSE),
                 bins = 30)  +
  geom_histogram(aes(p_value),
                 mutate(jasr_exact_zoom_plot_data,
                        z = TRUE),
                   bins = 400) +   
  facet_zoom(
    xlim = c(0, 0.1), 
    ylim = c(0, 600),
    zoom.data = z,
    horizontal = FALSE) +
  theme(zoom.y = element_blank(), 
        validate = FALSE) +
  scale_x_continuous(breaks = pretty) +
  theme_light(base_size = 18) +
  ylab("frequency in JASR") +
  xlab("p-value (exactly reported in the article text)")

ggsave(here::here("figures/jasr_p_value_zoom_distribution.png"),
       w = 14,
       h = 6,
       dpi = 600)
```

## Caliper test

```{r}

caliper1 <- c(0.03875, 0.04000)
caliper2 <- c(0.04875, 0.05000)

jasr_caliper <- 
  jasr_exact_zoom_plot_data %>% 
  mutate(in_caliper = ifelse(p_value %in% caliper1, 
                             "smaller", 
                             ifelse(p_value %in% caliper2, 
                                    "larger", ""))) %>% 
  filter(in_caliper != "") %>% 
  count(in_caliper)

jasr_caliper_test_binom_test <- 
binom.test(jasr_caliper$n[2],
           sum(jasr_caliper$n), 
           p = 1/2,
           alternative = "less")

jasr_relative_risk <- 
  jasr_caliper_test_binom_test$estimate[[1]] / jasr_caliper_test_binom_test$null.value[[1]]

jasr_caliper_n <- unname(jasr_caliper_test_binom_test$parameter)
jasr_caliper_k <- unname(jasr_caliper_test_binom_test$statistic)
jasr_caliper_p <- round(unname(jasr_caliper_test_binom_test$p.value), 10)

jasr_df <- data.frame(
  x = 0.05,
  y = 140,
  label = paste0(  "N = ", jasr_caliper_n, 
                   ", K = ", jasr_caliper_k, 
                   ", p = ", knitr:::format_sci(signif(jasr_caliper_p, 4), 'html')  , "") 
)

jas_caliper <- 
  jas_exact_zoom_plot_data %>% 
  mutate(in_caliper = ifelse(p_value %in% caliper1, 
                             "smaller", 
                             ifelse(p_value %in% caliper2, 
                                    "larger", ""))) %>% 
  filter(in_caliper != "") %>% 
  count(in_caliper)

jas_caliper_test_binom_test <- 
binom.test(jas_caliper$n[2],
           sum(jas_caliper$n), 
           p = 1/2,
           alternative = "less")

jas_relative_risk <- 
  jas_caliper_test_binom_test$estimate[[1]] / jas_caliper_test_binom_test$null.value[[1]]

jas_caliper_n <- unname(jas_caliper_test_binom_test$parameter)
jas_caliper_k <- unname(jas_caliper_test_binom_test$statistic)
jas_caliper_p <- round(unname(jas_caliper_test_binom_test$p.value), 10)

jas_df <- data.frame(
  x = 0.05,
  y = 140,
  label = paste0(  "N = ", jas_caliper_n, 
                   ", K = ", jas_caliper_k, 
                   ", p = ", knitr:::format_sci(signif(jas_caliper_p, 4), 'html')  , "") 
)

```

The JAS p-value is `r format(jas_caliper_p, scientific = FALSE)` and the JASR p-value is `r format(jasr_caliper_p, scientific = FALSE)`


```{r}
library(ggtext)

ggplot(jasr_exact_zoom_plot_data) +
  aes(p_value) +
  geom_histogram(bins = 27)  +
  geom_segment(x = 0.05,
            xend = 0.05,
            y = 0,
            yend = 120,
             colour = "red") +
  xlim(0.03, 0.07) +
  ylim(0, 150) +
  theme_minimal() +
  ylab("frequency in JASR") +
  xlab("p-value (exactly reported in the article text)") +
  geom_richtext(
    data = jasr_df,
    aes(x, y, 
        label = label),
    fill = NA, 
    label.color = NA,
    size = 10
  ) +
  theme_light(base_size = 18) 

ggsave(here::here("figures/jasr_p_value_caliper_test.png"),
       w = 14,
       h = 6,
       dpi = 600)

library(ggtext)

ggplot(jas_exact_zoom_plot_data) +
  aes(p_value) +
    # annotate("rect",
    #        xmin = caliper1[1],
    #        xmax = caliper1[2],
    #        ymax = 120,
    #        ymin = 0,
    #        fill = "blue",
    #        colour = "blue") +
    #   annotate("rect",
    #        xmin = caliper2[1],
    #        xmax = caliper2[2],
    #        ymax = 120,
    #        ymin = 0,
    #        fill = "blue",
    #        colour = "blue") +
  geom_histogram(bins = 27)  +
  geom_segment(x = 0.05,
            xend = 0.05,
            y = 0,
            yend = 120,
             colour = "red") +
  xlim(0.03, 0.07) +
  ylim(0, 150) +
  theme_minimal() +
  ylab("frequency in JAS") +
  xlab("p-value (exactly reported in the article text)") +
  geom_richtext(
    data = jas_df,
    aes(x, y, 
        label = label),
    fill = NA, 
    label.color = NA,
    size = 10
  ) +
  theme_light(base_size = 18) 

ggsave(here::here("figures/jas_p_value_caliper_test.png"),
       w = 14,
       h = 6,
       dpi = 600)
```

## Statcheck of JASR articles

```{r}
#| output: false

library(statcheck)

# load articles -------------------------------------------------------------
full_text_jasr_statcheck <- readRDS(here::here("data/full_text_jasr.rds"))

# run statcheck
jasr_statcheck_results <- 
  full_text_jasr_statcheck %>% 
  mutate(statcheck_results = map(unlist(full_text_jasr), statcheck))

# plot it
jasr_statcheck_results_tbl <- 
  jasr_statcheck_results %>% 
  select(statcheck_results) %>% 
  unnest() 

n_minor_inconsistencies <- 
  jasr_statcheck_results_tbl %>% 
  filter(error) %>% 
  nrow()

n_major_inconsistencies <- 
  jasr_statcheck_results_tbl %>% 
  filter(decision_error) %>% 
  nrow()

class(jasr_statcheck_results_tbl) <- c("statcheck", "data.frame")
```

```{r}
plot(jasr_statcheck_results_tbl, APAstyle = TRUE) +
  geom_point(size = 5) +
  scale_color_viridis_d() +
  annotate("text",
           x = 0.3, 
           y = 0.75,
           size = 5,
           hjust = 0,
           label = paste0(nrow(jasr_statcheck_results_tbl), " papers in JASR\n",
             n_minor_inconsistencies, " with inconsistencies\n",
            n_major_inconsistencies, " with decision error"
                          )) +
  coord_fixed()


ggsave(here::here("figures/jasr_statcheck.png"),
       w = 8,
       h = 5,
       dpi = 600)
```

## Statcheck of JAS articles

```{r}
#| output: false

# load articles -------------------------------------------------------------
full_text_jas_statcheck <- readRDS(here::here("data/full_text_jas.rds"))

# run statcheck
jas_statcheck_results <- 
  full_text_jas_statcheck %>% 
  mutate(statcheck_results = map(unlist(full_text_jas), statcheck))

jas_statcheck_results_tbl1 <- 
jas_statcheck_results %>% 
  select(-full_text_jas) %>%  
  unnest(statcheck_results) 

# plot it
jas_statcheck_results_tbl <- 
  jas_statcheck_results %>% 
  select(statcheck_results) %>% 
  unnest() 

class(jas_statcheck_results_tbl) <- c("statcheck", "data.frame")
```

```{r}
plot(jas_statcheck_results_tbl, APAstyle = TRUE) +
   geom_point(size = 5) +
  scale_color_viridis_d() +
  coord_fixed()

ggsave(here::here("figures/jas_statcheck.png"),
       w = 8,
       h = 5,
       dpi = 600)
```


